Index: libs/libmythtv/avformatdecoder.cpp
===================================================================
--- libs/libmythtv/avformatdecoder.cpp.orig	2007-07-12 21:24:14.000000000 -0400
+++ libs/libmythtv/avformatdecoder.cpp	2007-07-12 23:49:55.000000000 -0400
@@ -1,12 +1,16 @@
 // C headers
 #include <cassert>
 #include <unistd.h>
+#include <fcntl.h>
 
 // C++ headers
 #include <algorithm>
 #include <iostream>
 using namespace std;
 
+// QT headers
+#include "qdir.h"
+
 // MythTV headers
 #include "mythconfig.h" // for CONFIG_LIBDTS
 #include "avformatdecoder.h"
@@ -36,6 +40,8 @@
 #include "../libavcodec/parser.h"
 #include "../libmythmpeg2/mpeg2.h"
 #include "ivtv_myth.h"
+#include "../libdshowloader/dshow/DSVD_extern.h"
+#include "libavformat/riff.h"
 // from libavcodec
 extern const uint8_t *ff_find_start_code(const uint8_t * restrict p, const uint8_t *end, uint32_t * restrict state);
 }
@@ -85,24 +91,161 @@
 class AvFormatDecoderPrivate
 {
   public:
-    AvFormatDecoderPrivate(bool allow_libmpeg2)
-        : mpeg2dec(NULL), allow_mpeg2dec(allow_libmpeg2) { ; }
-   ~AvFormatDecoderPrivate() { DestroyMPEG2(); }
+    AvFormatDecoderPrivate(bool allow_libmpeg2, bool allow_directshow)
+        : mpeg2dec(NULL), allow_mpeg2dec(allow_libmpeg2),
+          dshowdec(NULL), allow_dshow(allow_directshow) { ; }
+   ~AvFormatDecoderPrivate() { DestroyMPEG2(); DestroyDirectShow();}
     
     bool InitMPEG2();
     bool HasMPEG2Dec() const { return (bool)(mpeg2dec); }
 
+    bool InitDirectShow(AVCodecContext *enc);
+    bool HasDirectShow() const { return (bool)(dshowdec); }
+
     void DestroyMPEG2();
     void ResetMPEG2();
     int DecodeMPEG2Video(AVCodecContext *avctx, AVFrame *picture,
                          int *got_picture_ptr, uint8_t *buf, int buf_size);
 
+    void DestroyDirectShow();
+    void ResetDirectShow();
+    int DecodeDirectShowVideo(AVCodecContext *avctx, AVFrame *picture,
+                         int *got_picture_ptr, uint8_t *buf, int buf_size);
+
   private:
     mpeg2dec_t *mpeg2dec;
     bool        allow_mpeg2dec;
+    DS_VideoDecoder *dshowdec;
+    bool        allow_dshow;
     avframe_q   partialFrames;
 };
 
+bool AvFormatDecoderPrivate::InitDirectShow(AVCodecContext *enc)
+{
+    const struct AVCodecTag *bmp_taglists[] = {codec_bmp_tags, 0};
+
+    if(enc->codec_tag == 0)
+        enc->codec_tag = av_codec_get_tag(bmp_taglists, enc->codec_id);
+    VERBOSE(VB_IMPORTANT, LOC + QString("Trying DirectShow for FOURCC 0x%1")
+            .arg(enc->codec_tag, 8, 16, 0));
+    if (!allow_dshow)
+        return false;
+    DestroyDirectShow();
+    if (enc->codec_tag == 0) {
+        allow_dshow = false;
+        return false;
+    }
+//    QString dec = gContext->GetSetting("UseDirectShowVideoDecoder", "no");
+    QString dec = "yes";
+
+    if (dec == "yes")
+    {
+        bool found = false;
+        QString codec;
+        GUID guid;
+        QString codec_file = QDir::homeDirPath() +
+                            QString("/.mythtv/dshowcodecs");
+        if (! QFileInfo(codec_file).isFile()) {
+            allow_dshow = false;
+            return false;
+        }
+        QString videotype;
+        AVCodec *avc = avcodec_find_decoder(enc->codec_id);
+        if (! avc) {
+           allow_dshow = false;
+           return false;
+        }
+        videotype = avc->name;
+        QFile fh (codec_file);
+        QString line;
+        fh.open(IO_ReadOnly);
+        while (! fh.atEnd() && ! found) {
+            QStringList fourc, guidlist;
+            fh.readLine(line, 1024);
+            codec = line.section(':', 0, 0).stripWhiteSpace();
+            fourc = QStringList::split(",",line.section(':', 1, 1));
+            guidlist  = QStringList::split(",",line.section(':', 2, 2));
+            if (guidlist.count() != 11)
+                continue;
+            for (QStringList::Iterator it = fourc.begin();
+                 it != fourc.end(); it++)
+            {
+                if ((*it).stripWhiteSpace() == videotype)
+                {
+                    guid.f1 = guidlist[0].toULong(0, 0);
+                    guid.f2 = guidlist[1].toUShort(0, 0);
+                    guid.f3 = guidlist[2].toUShort(0, 0);
+                    for (int i = 0; i < 8; i++)
+                        guid.f4[i] = guidlist[i + 3].toUShort(0, 0);
+                    found = true;
+                }
+            }
+            if (found)
+                break;
+        }
+        fh.close();
+        if (found) {
+           BITMAPINFOHEADER bih;
+           bih.biSize = sizeof(BITMAPINFOHEADER);
+           bih.biWidth = enc->width;
+           bih.biHeight = enc->height;
+           bih.biPlanes = 1;
+           bih.biBitCount = 24;
+           bih.biCompression = enc->codec_tag;
+           bih.biSizeImage = 0;
+           bih.biXPelsPerMeter=0;
+           bih.biYPelsPerMeter=0;
+           bih.biClrUsed=0;
+           bih.biClrImportant=0;
+           
+           dshowdec = DS_VideoDecoder_Open(codec.ascii(), &guid, &bih, 0, 0);
+           if (! dshowdec) {
+                allow_dshow = false;
+                return false;
+            }
+            DS_VideoDecoder_SetDestFmt(dshowdec,12,0x30323449); //IMGFMT_I420
+            DS_VideoDecoder_StartInternal(dshowdec);
+            VERBOSE(VB_IMPORTANT, LOC + "Found DirectShow filter");
+            return true;
+       }
+    }
+    allow_dshow = false;
+    return false;
+}
+
+void AvFormatDecoderPrivate::DestroyDirectShow()
+{
+    VERBOSE(VB_PLAYBACK, LOC + "Destroying filter");
+    if (dshowdec)
+    {
+        DS_VideoDecoder_Destroy(dshowdec);
+        dshowdec = NULL;
+    }
+}
+
+void AvFormatDecoderPrivate::ResetDirectShow()
+{
+}
+
+int AvFormatDecoderPrivate::DecodeDirectShowVideo(AVCodecContext *avctx,
+                                             AVFrame *picture,
+                                             int *got_picture_ptr,
+                                             uint8_t *buf, int buf_size)
+{
+    int ret;
+    int len = buf_size;
+    *got_picture_ptr = 0;
+    avctx->get_buffer(avctx, picture);
+    ret = DS_VideoDecoder_DecodeInternal(dshowdec, buf, len, 0,
+                                         (char *)picture->data[0]);
+    if(ret == 0)
+      *got_picture_ptr = 1;
+    else
+      avctx->release_buffer(avctx, picture);
+    return buf_size;
+}
+
+/*************************************************/
 bool AvFormatDecoderPrivate::InitMPEG2()
 {
     if (!allow_mpeg2dec)
@@ -267,7 +410,7 @@
                                  bool use_null_videoout,
                                  bool allow_libmpeg2)
     : DecoderBase(parent, pginfo),
-      d(new AvFormatDecoderPrivate(allow_libmpeg2)),
+      d(new AvFormatDecoderPrivate(allow_libmpeg2, true)),
       h264_kf_seq(new H264::KeyframeSequencer()),
       ic(NULL),
       frame_decoded(0),             decoded_video_frame(NULL),
@@ -971,7 +1114,8 @@
         uint align_width  = enc->width;
         uint align_height = enc->height;
 
-        align_dimensions(enc, align_width, align_height);
+        if (! d->HasDirectShow())
+            align_dimensions(enc, align_width, align_height);
 
         if (align_width == 0 && align_height == 0)
         {
@@ -1388,6 +1532,7 @@
                 }
 
                 // Only use libmpeg2 when not using XvMC
+              if (! d->InitDirectShow(enc))
                 if (CODEC_ID_MPEG1VIDEO == enc->codec_id ||
                     CODEC_ID_MPEG2VIDEO == enc->codec_id)
                 {
@@ -3205,7 +3350,21 @@
                     int gotpicture = 0;
 
                     avcodeclock.lock();
-                    if (d->HasMPEG2Dec())
+/*                    printf("Trying: %d\n",len);
+                    if (0) {
+                      static int fnum = 0;
+                      char str[80];
+                      int fh;
+                      sprintf(str,"enc%d", fnum++);;
+                      fh = open(str, 01101,00777);
+                      write(fh, ptr, len);
+                      close(fh);
+                    }
+*/
+                    if (d->HasDirectShow())
+                        ret = d->DecodeDirectShowVideo(context, &mpa_pic,
+                                                  &gotpicture, ptr, len);
+                    else if (d->HasMPEG2Dec())
                         ret = d->DecodeMPEG2Video(context, &mpa_pic,
                                                   &gotpicture, ptr, len);
                     else
Index: libs/libmythtv/libmythtv.pro
===================================================================
--- libs/libmythtv/libmythtv.pro.orig	2007-07-12 21:24:14.000000000 -0400
+++ libs/libmythtv/libmythtv.pro	2007-07-12 21:24:48.000000000 -0400
@@ -27,6 +27,9 @@
 DEPENDPATH  += ../libmythlivemedia/UsageEnvironment/include
 DEPENDPATH  += ../libmythlivemedia/UsageEnvironment
 
+DEPENDPATH  += ../libdshowloader ../libdshowloader/dshow ../libdshowloader/wine
+LIBS        += -L../libdshowloader -lloader
+
 LIBS += -L../libmyth -L../libavutil -L../libavcodec -L../libavformat 
 LIBS += -L../libmythmpeg2 -L../libmythdvdnav
 LIBS += -lmyth-$${LIBVERSION} -lmythavutil-$${LIBVERSION}
@@ -51,6 +54,7 @@
 TARGETDEPS += ../libavformat/libmythavformat-$${LIBVERSION}.$${QMAKE_EXTENSION_SHLIB}
 TARGETDEPS += ../libmythmpeg2/libmythmpeg2-$${LIBVERSION}.$${QMAKE_EXTENSION_LIB}
 TARGETDEPS += ../libmythdvdnav/libmythdvdnav-$${LIBVERSION}.$${QMAKE_EXTENSION_LIB}
+TARGETDEPS += ../libdshowloader/libloader.$${QMAKE_EXTENSION_LIB}
 
 
 DEFINES += _LARGEFILE_SOURCE
Index: libs/libs.pro
===================================================================
--- libs/libs.pro.orig	2007-07-12 21:24:13.000000000 -0400
+++ libs/libs.pro	2007-07-12 21:24:48.000000000 -0400
@@ -8,7 +8,7 @@
 # Directories
 SUBDIRS += libavutil libavcodec libavformat libmythsamplerate 
 SUBDIRS += libmythsoundtouch libmythmpeg2 libmythdvdnav
+SUBDIRS += libdshowloader
 SUBDIRS += libmyth libmythtv libmythui libmythfreemheg
 SUBDIRS += libmythupnp
 SUBDIRS += libmythlivemedia
-
Index: libs/libdshowloader/libdshowloader.pro
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libs/libdshowloader/libdshowloader.pro	2007-07-12 21:24:48.000000000 -0400
@@ -0,0 +1,73 @@
+include ( ../../config.mak )
+include ( ../../settings.pro )
+
+TEMPLATE = lib
+TARGET = loader
+CONFIG += thread staticlib warn_off
+CONFIG -= qt
+target.path = $${LIBDIR}
+INSTALLS = target
+
+DEPENDPATH = compat
+INCLUDEPATH = compat
+
+DEFINES += _LARGEFILE_SOURCE __WINE__ NOAVIFILE_HEADERS MPLAYER
+
+# Debug mode on x86 must compile without -fPIC and with -O, 
+# otherwise gcc runs out of registers.
+debug:contains(TARGET_ARCH_X86, yes) {
+    !contains(TARGET_ARCH_X86_64, yes) {
+        QMAKE_CFLAGS_SHLIB = 
+    }
+}
+
+QMAKE_CFLAGS_DEBUG += -O
+
+QMAKE_CLEAN += $(TARGET) $(TARGETA) $(TARGETD) $(TARGET0) $(TARGET1) $(TARGET2)
+
+# Input
+SOURCES += driver.c afl.c vfl.c
+SOURCES += ldt_keeper.c pe_image.c module.c ext.c win32.c
+SOURCES += pe_resource.c resource.c registry.c elfdll.c
+SOURCES += wrapper.S
+SOURCES += compat/compat.c
+SOURCES += dshow/DS_AudioDecoder.c dshow/DS_Filter.c dshow/DS_VideoDecoder.c \
+	dshow/allocator.c dshow/cmediasample.c dshow/guids.c \
+	dshow/inputpin.c dshow/outputpin.c dshow/mediatype.c osdep/mmap_anon.c
+
+INCLUDEPATH += dshow
+
+
+contains( TARGET_ARCH_ALPHA, yes ) {
+    QMAKE_CFLAGS_RELEASE += -fforce-addr -freduce-all-givs
+}
+
+contains( TARGET_ALTIVEC, yes ) {
+  macx {
+    QMAKE_CFLAGS_RELEASE += -faltivec
+    QMAKE_CFLAGS_DEBUG   += -faltivec
+  }
+  !macx {
+    QMAKE_CFLAGS_RELEASE += -maltivec -mabi=altivec
+  }
+}
+
+macx {
+    LIBS               += -lz
+    QMAKE_LFLAGS_SHLIB += -single_module
+    QMAKE_LFLAGS_SHLIB += -seg1addr 0xC2000000
+}
+
+# omit-frame-pointer doesn't play nice iwth win32 code
+QMAKE_CFLAGS_RELEASE -= -fomit-frame-pointer
+QMAKE_CFLAGS_DEBUG   -= -fomit-frame-pointer
+
+registercodec.depends += modify_reg.c registry.c
+registercodec.commands += $(CC) -I. -Icompat -o registercodec modify_reg.c
+QMAKE_EXTRA_UNIX_TARGETS += registercodec
+POST_TARGETDEPS += registercodec
+
+mrcinstall.path=$${PREFIX}/bin
+mrcinstall.files=registercodec
+INSTALLS += mrcinstall
+QMAKE_CLEAN += registercodec
